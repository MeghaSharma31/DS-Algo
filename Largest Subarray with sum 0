class GfG
{
    int maxLen(int arr[], int n)
    { int res = 0;
        int sum = 0;
         HashMap<Integer,Integer> map = new HashMap<>();
         map.put(sum,-1);        // if at last sum is 0 means the whole array sum is 0, so arr.length-1 which will be i at that time subtracted from map.get(0) will be arr.length
                                 // for cases like -1 1 -1 1 the answer is 4, as for i = 3, sumarray[i] = 0 (-1+1+-1+1) and so i-(-1) = 3--1= 4 which is the correct answer
        for(int i = 0; i <arr.length; i++) {
            sum = sum + arr[i];
            arr[i] = sum;          // first make the sumarray taking consecutive some from left to right
        }
        
    //  Logic is if sum of some part of array is S an sum of some smaller part within that part is also S then it means rest of the smaller part in that part is 0
        <---------- S--------------->
        [_ _ _ _ _ _ _ _ _ _ _ _ _ _]        <---- Pictorial depiction
        <----- S ------><----- 0 --->
        for(int i = 0;i<arr.length;i++) {
        if(!map.containsKey(arr[i])) {
            map.put(arr[i],i);
        }
        else {
          res = Math.max(res, i-map.get(arr[i]));
        }
        }
        return res;
    }
}
