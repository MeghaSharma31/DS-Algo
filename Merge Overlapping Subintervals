class Solution {
    public int[][] merge(int[][] intervals) {
        ArrayList<int[]> res = new ArrayList<>();
        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        int[] smallres = new int[2];
        smallres[0] = intervals[0][0];
        smallres[1] = intervals[0][1];
        res.add(smallres);
        int k = 0;
       for(int i = 1;i<intervals.length;i++) {
           if(res.get(k)[1] >= intervals[i][0]) {
               if(res.get(k)[1]<intervals[i][1]) {
                   res.get(k)[1] = intervals[i][1];
               }
           }
           else {
               int[] smallans = new int[2];
               smallans[0] = intervals[i][0];
               smallans[1] = intervals[i][1];
               res.add(smallans);
               k++;
           }
       }
      int[][] resArray = new int[res.size()][2];
        for(int i =0;i<res.size();i++) {
            resArray[i] = res.get(i);
        }
        return resArray;
    }
    
  //  class SortbyStart implements Comparator<int[]> {
  //      public int compare(int[] a,int[] b) {
  //          if(a[0]<b[0])
  //              return -1;
  //          else if(a[0]>b[0])
  //              return 1;
  //          else if(a[1]<b[1])
  //              return -1;
  //          else return 1;
  //      }
  //  }
}
